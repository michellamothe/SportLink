@startuml SportLink

class Utilisateur {
  - id : UUID
  - nomUtilisateur : String
  - courriel : String
  - sportsFavoris : List<Sport>
  - disponibilites : List<String>
  - photoProfil : String
}
class AuthVueModele {
    - courriel : String
    - motDePasse : String
    - estEnChargement : Boolean
    + inscrire(courriel : String, nomUtilisateur : String, motDePasse : String) : Boolean
    + connecter(courriel : String, motDePasse : String) : Utilisateur
    + mettreAJourMDP(courriel : String) : void
}
class ProfilUtilisateurVueModele {
  - utilisateur : Utilisateur
  - estEnChargement : Boolean
  + modifierMotDePasse(nouveauMotDePasse : String) : void
  + chargerUtilisateur() : void
  + modifierProfil(sportsFavoris : List<Sport>, disponibilites : List<String>, photoProfil : String) : void
  + changerPhotoProfil(nouvellePhoto : String) : void
}
AuthVueModele --> Utilisateur
ProfilUtilisateurVueModele --* Utilisateur

'------------------------------------------------------'
'---------------------- ACTIVITE ----------------------'
'------------------------------------------------------'
abstract class Activite {
  - id : UUID
  - sport : Sport
  - intervalleDate : DateInterval
  - placesDisponibles : Integer
  - niveau : Niveau
  - emplacement : Emplacement
  - complet : Boolean
  - messages : List<Message>
}
class ActiviteCompetitif {
  - notesAttribuees : Dict<Utilisateur, Dict<Utilisateur, String>>
}
class ActiviteRecreatif {
  - invitationsOuvertes : Boolean
}
class CreationActiviteVueModele {
  - activite : Activite
  - estEnChargement : Boolean
  + creerActivite(mode : ModeUtilisateur, date : Date, sport : Sport, places : Integer, debut : String, fin : String, lieu : String, niveau? : Niveau) : Task<Activite>
}
class DetailActiviteVueModele {
  - activite       : Activite
  - estEnChargement      : Boolean
  + participer() : Task<Utilisateur>
  + supprimerActivite() : Task<Void>
  + annulerParticipation() : Task<Void>
  + modifierActivite(nouvellesInfos: Activite) : Task<Activite>
}
DetailActiviteVueModele --> Activite
CreationActiviteVueModele --> Utilisateur
CreationActiviteVueModele --> Activite
Activite <|-- ActiviteCompetitif
Activite <|-- ActiviteRecreatif

'------------------------------------------------------'
'--------------------- EMPLACEMENT --------------------'
'------------------------------------------------------'
class Emplacement {
  - nomEmplacement : String
  - coordonnees : CLLocationCoordinate2D
  - sportsDisponibles : List<String>
  - heuresOuvertures : String 
}
Activite o-- Emplacement
Activite *-- Message

'------------------------------------------------------'
'---------------------- MESSAGE -----------------------'
'------------------------------------------------------'
class Message {
  - id : UUID
  - contenu : String
  - envoyeA : Date
  - expediteur : Utilisateur
}
class ConversationVueModele {
  - activite : Activite
  - messages : List<Message>
  - estEnChargement : Boolean
  + obtenirMessages() : Task<List<Message>>
  + envoyerMessage(texte: String) : Task<Message>
}
ConversationVueModele --* Message

'------------------------------------------------------'
'-------------------- STATISTIQUE ---------------------'
'------------------------------------------------------'
class Statistique {
  - sport : Sport
  - partiesJouees : Integer
  - gagnees : Integer
  - perdues : Integer
  - dernierResultat : Integer
}
class StatsVueModele {
  - stats : List<Statistique>
  + obtenirStats(idUtilisateur: UUID) : Task<List<Statistique>>
}
StatsVueModele --> Statistique
StatsVueModele --> Utilisateur


'-------------------- ENUM --------------------'
enum Niveau {
  Debutant
  Intermediaire
  Avance
}
enum Sport {
  Basketball
  Soccer
  Volleyball
  Baseball
  Tennis 
  Badminton
  Pickleball
  Waterpolo
  Football
  Rugby
  Ultimate
  Hockey
}
enum ModeUtilisateur {
  Recreatif 
  Competitif
}

@enduml